//*****************//Instructions//Select 2 nodes //Select a Control First//Select a Joint Second//*****************//Assigns a Selection to an Arraystring $theStrings[] = `ls -sl`;//Selects the Second in a Arrayselect $theStrings[1];//Assigns the position vector of the //Second Selection to a variable$theTransForm = `xform -q -t -ws`;//Selects the first on the Arrayselect $theStrings[0];//Change its position to 0 in XYZmove -rpr 0 0 0 ;//Freeze Transformation of Translation OnlymakeIdentity -apply true -t 1;//Move its position to the vector assigned in the var theTransFormmove -rpr $theTransForm[0] $theTransForm[1] $theTransForm[2];//Assigns String theName of the first Selection//And add GRP to the String$nName = $theStrings[0] + "_GRP";//Create a Group for the Selection//Using the previous string as the name of the Groupgroup -n $nName; //Change the Pivot Point of the newly created Group//Using theTransform Vectorsxform -ws -piv $theTransForm[0] $theTransForm[1] $theTransForm[2] ;//Creates Strings that will be used to connect attribute in a rig$theConnection0 = $theStrings[1] + ".jointOrient";$theConnection1 = $theStrings[0] + "_GRP.rotate";//Connects the Joint Orientation of the Selected Joint//To the the Rotation of the Controls GroupconnectAttr $theConnection0 $theConnection1;//Creates Strings that will be used to connect attribute in a rig$theConnection0 = $theStrings[0] + ".rotate";$theConnection1 = $theStrings[1] + ".rotate";//Connects the rotation of the Selected Control//To the Rotation of the Selected JointconnectAttr $theConnection0 $theConnection1;//Select the Controlselect $theStrings[0];//Freeze Transform of the Controls PositionmakeIdentity -apply true -t 1;//Connect the Rotate Order of the Control to the Joint$theConnection0 = $theStrings[0] + ".rotateOrder";$theConnection1 = $theStrings[1] + ".rotateOrder";connectAttr $theConnection0 $theConnection1;// Result: Connected joint5.rotateOrder to joint4.rotateOrder. // 